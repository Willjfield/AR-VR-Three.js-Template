<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <title>mask_template</title>
    <link rel="stylesheet" type="text/css" href="css/style.css">

    <style>
      
    </style>
  </head>
  <body>    
      <script type="text/javascript" src="js/three.min.js"></script>

      <div id="render-canvas">

      <audio id="audio" src="/audio/treefingers.mp3" type="audio/mpeg"> </audio>



      <!-- cam -->
      <p id="errorMessage" style="display:none"></p>
      <video id="video" autoplay loop width="480" height="320" style="display:none"></video>  
      <canvas id="videoImage" width="480" height="320" style="display:none"></canvas>
    </div>

      <script type="text/javascript">
        var video = document.getElementById('video');
        var videoImage = document.getElementById('videoImage');
        var videoTexture;
        var scene, camera, renderer, stats;
        var videoImageContext;
        var videoWidth = 480, videoHeight = 320;
        var container;
        var movieMaterial, movieGeometry, movieScreen;
        var imageInfo, data;
        var videoImageContext = videoImage.getContext('2d');
        var audio = document.getElementById ('audio');
       
        // ref: https://github.com/samdutton/simpl/blob/master/getusermedia/sources/js/main.js
        var audioSource = null, videoSource = null, camUserID = null, camEnvironmentID = null;
        var mediaConstraints = {};

        // var colorSkin = document.getElementById("colorSkin");
        // var colorSkinCtx = colorSkin.getContext("2d");
        
        window.addEventListener('click', fullscreen, false);
 

        
        

        
        function gotSources(sourceInfos) {
            for (var i = 0; i !== sourceInfos.length; ++i) {
                var sourceInfo = sourceInfos[i];
                if (sourceInfo.kind === 'video') {
                  if (sourceInfo.facing === 'user') camUserID = sourceInfo.id;
                  else if (sourceInfo.facing === 'environment') {
                    camEnvironmentID = sourceInfo.id;
                    mediaConstraints = {
                    video: {
                      mandatory: {
                          maxWidth: 480,
                          maxHeight: 320,
                          minWidth: 480,
                          minHeight: 320
                        },
                      optional: [{sourceId: camEnvironmentID}]
                    }
                  };
                  navigator.getUserMedia(mediaConstraints, successCallback, errorCallback);
                  }
                  else {
                    camEnvironmentID = sourceInfo.id;
                    mediaConstraints = {
                    video: {
                      mandatory: {
                          maxWidth: 480,
                          maxHeight: 320,
                          minWidth: 480,
                          minHeight: 320
                        },
                      optional: [{sourceId: camEnvironmentID}]
                    }
                  };
                  navigator.getUserMedia(mediaConstraints, successCallback, errorCallback);
                  }
                } 
            }
          }

            // for selecting back camera of phone
            if (typeof MediaStreamTrack.getSources === 'undefined'){
              alert('This browser does not support MediaStreamTrack.\n\nTry Chrome Canary.');
            } else {
              MediaStreamTrack.getSources(gotSources);
            }
            navigator.getUserMedia = navigator.getUserMedia || 
              navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
          
          

          function successCallback(stream) {
            // window.stream = stream; // make stream available to console

            video.src = window.URL.createObjectURL(stream);
            video.play();

            init ();         
        }


        function errorCallback(error){
          var msg = 'No camera available.';
          if (error.code == 1) 
          {   msg = 'User denied access to use camera.';   }
          document.getElementById('errorMessage').textContent = msg;
          console.log('navigator.getUserMedia error: ', error);
        }


        // video.addEventListener('play', function() {
        //            // Every 33 milliseconds copy the video image to the canvas
        //            setInterval(function() {
        //               //if (video.paused || video.ended) return;
        //               videoImageContext.fillRect(0, 0, videoWidth, videoHeight);
        //               videoImageContext.drawImage(video, 0, 0, videoWidth, videoHeight);
                  
        //               init();

        //            }, 33);
        //         }, false);




        function init () {
 
            container = document.getElementById('render-canvas'); 

            renderer = new THREE.WebGLRenderer({
              antialias: true, 
              alpha: true
            });
            renderer.setClearColor(0x000000);
            renderer.autoClear = false;
            container.appendChild(renderer.domElement);     

            effect = new THREE.StereoEffect( renderer );
            effect.separation = 0.2;
            effect.targetDistance = 50;
            effect.setSize( window.innerWidth, window.innerHeight );  

            scene = new THREE.Scene(); 

    

            // texture for 3d - screen
            videoTexture = new THREE.Texture( videoImage);
            videoTexture.minFilter = THREE.LinearFilter;
            videoTexture.magFilter = THREE.LinearFilter;
            videoTexture.format = THREE.RGBFormat;
            videoTexture.generateMipmaps = false;

            videoTexture.wrapS = videoTexture.wrapT = THREE.ClampToEdgeWrapping;
            videoTexture.needsUpdate = true;

            
            movieMaterial = new THREE.MeshBasicMaterial( { map: videoTexture, overdraw: true, side:THREE.DoubleSide } );
            // the geometry on which the movie will be displayed;
            //      movie image will be scaled to fit these dimensions.
            movieGeometry = new THREE.PlaneBufferGeometry( 240, 100, 4, 4 );
            movieScreen = new THREE.Mesh( movieGeometry, movieMaterial );
            movieScreen.position.set(0,50,0);



            

            camera = new THREE.PerspectiveCamera(27, window.innerWidth / window.innerHeight, 1, 10000 );
            camera.position.set(0,50,200);
            //camera.lookAt(movieScreen.position);

            scene = new THREE.Scene();
            scene.add(movieScreen);

            /*

            setInterval(function() {
                      //if (video.paused || video.ended) return;
                      videoImageContext.fillRect(0, 0, videoWidth, videoHeight);
                      videoImageContext.drawImage(video, 0, 0, videoWidth, videoHeight);
                  
                      draw();

                   }, 5);
*/
            animate ();
        }


            function animate() {
       
              requestAnimationFrame( animate );
              //box ();
              update();
              render();
              //stats.update();
              
              

            }

            // function box () {

            //   colorSkinCtx.clearRect(0,0,colorSkin.width,colorSkin.height);

            //   colorSkinCtx.fillStyle = 'rgba(255,0,0,0.5)';
            //   colorSkinCtx.fillRect(0,0,colorSkin.width,colorSkin.height);
            // }

            function update() { 
  
              // WEB_CAM
                if(video.readyState === video.HAVE_ENOUGH_DATA){
                  videoImageContext.drawImage(video, 0,0);
                  
                  videoImageContext.fillStyle = 'rgb(0,0,0)';
                  videoImageContext.font = "12px helvetica";
                  videoImageContext.fillText("Some variable", videoImage.width/3, videoImage.height/12);
                  videoImageContext.fillStyle = 'rgba(255,0,0,0.5)';
                  videoImageContext.fillRect(0,0,videoImage.width,videoImage.width);
                        // update texture for 3D
                  if(videoTexture){
                    videoTexture.flipY = true;
                    videoTexture.needsUpdate = true;
                  }

                }

            }


            function render() {
              effect.render( scene, camera );
            }



            function fullscreen() {
              audio.play ();

              if (container.requestFullscreen) {
                container.requestFullscreen();
              } else if (container.msRequestFullscreen) {
                container.msRequestFullscreen();
              } else if (container.mozRequestFullScreen) {
                container.mozRequestFullScreen();
              } else if (container.webkitRequestFullscreen) {
                container.webkitRequestFullscreen();
              }
            }

            /*
            function draw () {

              imageData = videoImageContext.getImageData(0, 0, videoWidth, videoHeight);
              data = imageData.data;
                   

                   // for (var i = 0; i < data.length; i += 4) {
                   //    var bright = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
                   //    data[i] = bright;
                   //    data[i + 1] = bright;
                   //    data[i + 2] = bright;
                   // }

                   for (var i = 0; i < data.length; i += 4) {
                      var redLevel = (data[i] + data[i + 1] + data[i + 2]) / 3;
                      var bright = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
                      data[i] = redLevel;
                      data[i + 1] = 0;
                      data[i + 2] = 0;
                   }

                   videoImageContext.putImageData(imageData, 0, 0);
                   update ();
                   requestAnimationFrame( animate );
                   render();
            }
            */



        
        
    
      </script>
      

      <script src="js/StereoEffect.js"></script>
      <!-- <script src="js/controls/DeviceControls.js"></script> -->
      <script type="text/javascript" src="js/Detector.js"></script>
      <script type="text/javascript" src="js/CanvasRenderer.js"></script>
      <script type="text/javascript" src="js/Projector.js"></script>
      <!-- <script type="text/javascript" src="js/lib/tween.min.js"></script> -->
      <script type="text/javascript" src="js/stats.min.js"></script>
  </body>
</html>